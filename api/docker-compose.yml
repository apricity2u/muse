services:
  #  api:
  #    container_name: api-container
  #    environment:
  #      - TZ=Asia/Seoul
  #      - JAVA_OPTS=-Duser.timezone=Asia/Seoul
  #    image: api-image:latest
  #    env_file:
  #      - .env
  #    networks:
  #      - db-network
  #      - cache-network
  #      - web-network
  #      - monitor-network
  #    depends_on:
  #      mysql:
  #        condition: service_healthy
  #      redis:
  #        condition: service_healthy
  #
  #  client:
  #    container_name: client-container
  #    image: client-image:latest
  #    env_file:
  #      - .env
  #    environment:
  #      - DOMAIN=${DOMAIN}
  #      - API_URL=${API_URL}
  #    volumes:
  #      - /etc/letsencrypt/live/${DOMAIN}/privkey.pem:/etc/letsencrypt/live/${DOMAIN}/privkey.pem:ro
  #      - /etc/letsencrypt/live/${DOMAIN}/fullchain.pem:/etc/letsencrypt/live/${DOMAIN}/fullchain.pem:ro
  #      - /etc/localtime:/etc/localtime:ro
  #    ports:
  #      - "80:80"
  #      - "443:443"
  #    networks:
  #      - web-network
  #    depends_on:
  #      - api

  redis:
    container_name: redis-container
    image: redis:latest
    volumes:
      - redis-volume:/data
    command: [ "redis-server", "--appendonly", "yes" ]
    env_file:
      - .env
    networks:
      - cache-network
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  #  mysql:
  #    container_name: mysql-container
  #    image: mysql:8.0
  #    volumes:
  #      - db-volume:/var/lib/mysql
  #      - /etc/localtime:/etc/localtime:ro
  #    env_file:
  #      - .env
  #    environment:
  #      - TZ=Asia/Seoul
  #    networks:
  #      - db-network
  #    ports:
  #      - ${MYSQL_PORT}:3306
  #    command:
  #      - "--default-time-zone=Asia/Seoul"
  #      - "--ngram_token_size=2"
  #    healthcheck:
  #      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
  #      interval: 10s
  #      timeout: 5s
  #      retries: 3
  #      start_period: 30s

  #  mysql_exporter:
  #    container_name: mysql_exporter-container
  #    image: prometheus/mysqld_exporter:latest
  #    environment:
  #      - DATA_SOURCE_NAME=exporter:${EXPORTER_PASSWORD}@tcp(mysql-container:3306)/
  #    networks:
  #      - db-network
  #      - monitor-network
  #    depends_on:
  #      - mysql

  redis_exporter:
    container_name: redis_exporter-container
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis-container:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - cache-network
      - monitor-network
    depends_on:
      - redis

  node_exporter:
    container_name: node_exporter-container
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
    restart: unless-stopped
    networks:
      - monitor-network

  cadvisor:
    container_name: cadvisor-container
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitor-network

  prometheus:
    container_name: prometheus-container
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/prometheus/prometheus.yml:ro
    command:
      - --storage.tsdb.retention.time=3d
      - --web.enable-lifecycle
    networks:
      - monitor-network

  grafana:
    container_name: grafana-container
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - 3000:3000
    networks:
      - monitor-network
      - web-network
#    depends_on:
#      - mysql



volumes:
  db-volume:
  redis-volume:
  grafana-data:

networks:
  db-network:
  cache-network:
  web-network:
  monitor-network:
